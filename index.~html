<!DOCTYPE HTML>
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<style>
    #canvas_pan{
        float:right;
        display: inline-block;
        background-color: cyan;
        padding : 5px;
    }
    #buttons_pan{
        float:left;
        display: inline-block;
        background-color: cyan;
        margin : 5px;
    }
    button{
        margin:5px;
    }
    #code_pan{
        float:left;
        display: inline-block;
        background-color: cyan;
        margin : 5px;
        min-width : 300px;
        min-height : 200px;
        padding: 5px;
        margin-bottom: 10px;
    }
    input, select{
        max-width:50px;
        margin:2px;
    }
    .xremove{
        float:right;
        background-color:red;
    }
    .codel{
        background-color:yellow;
        padding : 5px;
        margin : 5px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    #run_button{
        background-color:green;
        padding : 5px;
    }
    .input_repeat_lines{
        min-width : 200px;
        min-height: 50px;
        padding : 5px;
        margin : 5px;
        border-style : inset;
        background-color : cyan;
    }
    .group_repeat{
        border-style:solid;
    }
</style>
</head>

<body>
<div id="canvas_pan">
    <canvas id="icanvas" width=640 height=500></canvas>
</div>
<div id="buttons_pan">
    <button id="move_button" onclick="click_move()">Move</button><br>
    <button id="turn_button" onclick="click_turn()">Turn</button><br>
    <button id="repeat_button" onclick="click_repeat()">Repeat</button><br>
    <button id="run_button" onclick="click_run()">Run</button><br>
</div>
<div id="code_pan" onClick="refresh_current_repeat()">
</div>


<script>
    var mapstr = "vhhhhhhhhhhhhhhhhhhhhv"+
                 "v                    v"+
                 "v                    v"+
                 "v           o        v"+
                 "v                    v"+
                 "v                    v"+
                 "v                    v"+
                 "v                    v"+
                 "v                    v"+
                 "v                    v"+
                 "v                    v"+
                 "v                    v"+
                 "hhhhhhhhhhhhhhhhhhhhhh";
    var ny = 13;
    var nx = mapstr.length / ny;
    var INTERVAL = 50
    var intervalMainLoop = null;
    var MOVE = "Avancer de ";
    var TXT_AFTER_MOVE = " cases"
    var TURN = "Tourner de ";
    var TXT_AFTER_TURN = ""
    var REPEAT = "Répéter "
    var TXT_AFTER_REPEAT = " fois"
    var IF_WALL = "Si prochaine case est un mur "
    var GAME_OVER = "Perdu !"
    var RUN = "Executer les ordres"
    var CELL_SIZE = 32;
    var VELOCITY = 8; //must be a divider of cell size
    var icode = 0;
    var frame = 0;
    /*var user_code = [MOVE + "5",
                     REPEAT + "4",
                        TURN + "90",
                        MOVE + "3",
                        '#',
                     MOVE + "10"];*/
    var user_code = [];
    var gameover = false;
    var canvas = document.getElementById('icanvas');
    canvas.width = nx*CELL_SIZE;
    canvas.height = ny*CELL_SIZE;
    var context = canvas.getContext("2d");
    var img_obj = {
        'source': null,
        'current': 0,
        'total_frames': 6,
        'width': 32,
        'height': 32,
        'x' : 2*CELL_SIZE,
        'y' : parseInt(ny/2*CELL_SIZE),
        'vx' : 0,
        'vy' : 0,
        'velocity' : VELOCITY
    };
    var nframes = {'left' : 6, 'right' : 6, 'up' : 4, 'down' : 4};
    var vel = {'left' : [-1,0], 'right' : [1,0], 'up' : [0,-1], 'down' : [0,1]};
    var orientation_seq = ['left','up','right','down'];
    var img = new Image();
    var goal_x;
    var goal_y;
    var goal_achieved = true;
    var n_repeat = [1];
    var instructions_repeat = [user_code];
    var icode_repeat = [-1];
    var wall_v = new Image();
    wall_v.src = "./wall_v.png"
    var wall_h = new Image();
    wall_h.src = "./wall_h.png"
    var walls_h = [];
    var walls_v = [];
    var current_repeat = document.getElementById("code_pan");
    initialize_run();

    function get_cell(){
        var x = parseInt((img_obj.x+CELL_SIZE/2)/CELL_SIZE);
        var y = parseInt((img_obj.y+CELL_SIZE/2)/CELL_SIZE);
        return [x,y];
    }

    function orientation_from_vel(){
        if(img_obj.vx > 0)
            return 'right';
        else if(img_obj.vx < 0)
            return 'left';
        else if(img_obj.vy > 0)
            return 'down';
        else if(img_obj.vy < 0)
            return 'up';
        else
            console.log("Invalid velocity");
    }

    function set_char_orientation(what){
        img_obj.total_frames = nframes[what];
        img_obj.current = 0;
        img_obj.source = img;
        img_obj.source = img;  // we set the image source for our object.
        img.src = './char1_' + what + '.png';
        img_obj.vx = vel[what][0];
        img_obj.vy = vel[what][1];
    }

    function process_user_code(){
        frame += 1;
        if(frame < INTERVAL/10){
            img_obj.velocity = 0;
            return '';
        }
        if(!goal_achieved){
            return '';
        }
        else{
            console.log("");
            console.log("***");
            console.log("instructions", instructions_repeat.slice());
            console.log("icode", icode_repeat.slice());
            console.log("nrepeat", n_repeat.slice());
            var level = instructions_repeat.length - 1; //index of current code
            var current_code = instructions_repeat[level];
            icode_repeat[level] += 1;
            console.log("level=",level);
            if(icode_repeat[level] >= current_code.length){
                console.log("============>");
                if(level == 0){ //end of program
                    img_obj.velocity = 0;
                    img_obj.current = 0
                    console.log("END OF PROGRAM");
                    gameover = true;
                    clearInterval(intervalMainLoop);
                    return '';
                }
                else{
                    n_repeat[level] -= 1;
                    if(n_repeat[level] == 0){ //enf of loop
                        n_repeat.pop();
                        instructions_repeat.pop();
                        icode_repeat.pop();
                        console.log("END OF LOOP");
                        return '';
                    }
                    else{
                        icode_repeat[level] = 0; //repeat the loop from zero
                    }
                }
            }
        }
        var codeline = current_code[icode_repeat[level]];
        console.log("CURRENT_CODE", current_code.slice(), icode_repeat.slice());
        console.log("level and icode_repeat[level]", level, icode_repeat[level]);
        console.log("       codeline", codeline);
        var split_line = codeline.split(" ");
        var argument = parseInt(split_line[split_line.length - 1]);
        console.log("       xcodeline", codeline, split_line, argument, MOVE, codeline.includes(MOVE));
        ////////////////////////////////////////////////////////////////////////
        if(codeline.includes(MOVE)){
            move_char(argument);
        }
        else if(codeline.includes(TURN)){
            turn_char(argument);
        }
        else if(codeline.includes(REPEAT)){
            console.log("LOG REPEAT", current_code[icode_repeat[level]]);
            instructions = [];
            while(true){
                icode_repeat[level] += 1 //at this level, "repeat" is already read
                var s = current_code[icode_repeat[level]];
                instructions.push(s);
                if(s.startsWith('#')){
                    break;
                }
            }
            n_repeat.push(argument);
            instructions_repeat.push(instructions);
            icode_repeat.push(-1);
        }
        else if(codeline == IF_WALL){
            console.log("IF WALL");
        }
        return codeline;
    }

    function move_char(argument){
        console.log("move char -->", argument);
        img_obj.velocity = VELOCITY;
        goal_x = img_obj.x + img_obj.vx * argument * CELL_SIZE;
        goal_y = img_obj.y + img_obj.vy * argument * CELL_SIZE;
        goal_achieved = false;
    }

    function turn_char(argument){
        //assert argument is a multiple of 90
        var quarters = argument / 90;
        var old_orientation = orientation_from_vel();
        var current_idx = orientation_seq.indexOf(old_orientation);
        var new_idx = (current_idx + quarters) % orientation_seq.length;
        var new_orientation = orientation_seq[new_idx];
        set_char_orientation(new_orientation);
        img_obj.velocity = 0;
        goal_achieved = true;
    }

    function check_conditions(){
        if(goal_x == img_obj.x && goal_y == img_obj.y){
            console.log("Goal position ok");
            goal_achieved = true;
        }
        else if(char_touch_wall()){
            console.log("Game over touch wall");
            context.font = "30px Arial";
            context.rect(0,0,canvas.width,canvas.height);
            context.fillStyle = "rgba(255, 255, 255, 0.5)";
            context.fill();
            context.fillStyle = "red";
            context.fillText(GAME_OVER, canvas.width/2, canvas.height/2);
            img_obj.velocity = 0
            gameover = true;
            clearInterval(intervalMainLoop);
        }
    }

    function draw_anim() { // context is the canvas 2d context.
        context.clearRect(0, 0, canvas.width, canvas.height);  // clear canvas
        draw_grid();
        draw_walls();
        context.drawImage(img_obj.source, img_obj.current * img_obj.width, 0,
                              img_obj.width, img_obj.height,
                              img_obj.x, img_obj.y, img_obj.width, img_obj.height);
        if(img_obj.velocity == 0){
            img_obj.current = 0;
        }
        else{
            img_obj.current = (img_obj.current + 1) % img_obj.total_frames;
            img_obj.x += img_obj.vx * img_obj.velocity;
            img_obj.y += img_obj.vy * img_obj.velocity;
        }
    }


    function draw_grid(){
        for (var x = 0.; x < canvas.width; x += CELL_SIZE) {
          context.moveTo(x, 0);
          context.lineTo(x, canvas.height);
        }
        for (var y = 0.; y < canvas.height; y += CELL_SIZE) {
          context.moveTo(0, y);
          context.lineTo(canvas.width, y);
        }
        context.moveTo(0,0);
        context.strokeStyle = "#ddd";
        context.stroke();
        /*
        var coord = get_cell();
        context.fillStyle = "blue";
        context.fillRect(coord[0]*CELL_SIZE,coord[1]*CELL_SIZE, CELL_SIZE, CELL_SIZE);
        */
    }

    function draw_walls(){
        for (var i=0; i < walls_v.length; i++){
            var pix = [walls_v[i][0]*CELL_SIZE, walls_v[i][1]*CELL_SIZE];
            context.drawImage(wall_v, pix[0], pix[1]);
        }
        for (var i=0; i < walls_h.length; i++){
            var pix = [walls_h[i][0]*CELL_SIZE, walls_h[i][1]*CELL_SIZE];
            context.drawImage(wall_h, pix[0], pix[1]);
        }
    }

    function is_wall(coord){
         var i = nx * coord[1] + coord[0];
         return mapstr[i]=="v" || mapstr[i]=="h";
    }

    function char_touch_wall(){
        if(is_wall(get_cell())){ //topleft
            return true;
        }
        else{ //bottom right
            var delta = parseInt(0.75*CELL_SIZE);
            var x = img_obj.x + delta;
            var y = img_obj.y + delta;
            x = parseInt(x/CELL_SIZE);
            y = parseInt(y/CELL_SIZE);
            return is_wall([x,y]);
        }
    }

    function click_run(){
        user_code = get_user_code();
        console.log("USER CODE", user_code);
        initialize_run();
        console.log("START MAIN LOOP");
        intervalMainLoop = setInterval(function(){ main_loop(); }, INTERVAL);
    }

    function initialize_run(){
        VELOCITY = 8; //must be a divider of cell size
        icode = 0;
        frame = 0;
        goal_x = null;
        goal_y = null;
        goal_achieved = true;
        gameover = false;
        n_repeat = [1];
        instructions_repeat = [user_code];
        icode_repeat = [-1];
        for(var i=0; i<mapstr.length; i++){
            var x = i%nx;
            var y = parseInt(i/nx);
            if(mapstr[i]=="v")
                walls_v.push([x,y])
            else if(mapstr[i]=="h")
                walls_h.push([x,y])
            else if(mapstr[i]=="o"){
                img_obj.x = x*CELL_SIZE;
                img_obj.y = y*CELL_SIZE;
            }
        }
        img_obj.vx = 0;
        img_obj.vy = 0;
        img_obj.velocity = VELOCITY
        set_char_orientation('right', img_obj);
    }


    function main_loop(){
        check_conditions();
        if(!gameover){
            process_user_code();
            draw_anim();
        }
    }

    function get_code_element(what, txt_after, base){
        var code = what + base + txt_after;
        return code;
    }

    function create_xrem(){
        var xrem = document.createElement("button");
        xrem.innerHTML = "x";
        xrem.className = "xremove";
        xrem.onclick = function (){
            var p = this.parentElement;
            if(this.parentElement.innerHTML.includes(REPEAT)){
                p.parentElement.parentElement.removeChild(p.parentElement);
            }
            else{
                p.parentElement.removeChild(p);
            }
        }
        return xrem;
    }

    function click_repeat(){
        var base = '<input type="number" value="2" class="input_repeat">';
        var code = get_code_element(REPEAT, TXT_AFTER_REPEAT, base);
        var node = document.createElement("div");
        node.className = "codel repeat";
        node.innerHTML = code;
        var xrem = create_xrem();
        node.appendChild(xrem);
        //
        var more = document.createElement("div");
        if(current_repeat.className.includes("repeat")){
            more.level = current_repeat.level + 1;
        }
        else{
            more.level = 1;
        }
        more.className = "input_repeat_lines";
        //
        var group = document.createElement("div");
        group.className = "group_repeat";
        group.appendChild(node);
        group.appendChild(more);
        current_repeat.appendChild(group);
    }

    function click_move(){
        var base = '<input type="number" value="1" class="input_move">';
        var code = get_code_element(MOVE, TXT_AFTER_MOVE, base);
        var node = document.createElement("div");
        node.className = "codel move";
        node.innerHTML = code;
        var xrem = create_xrem();
        node.appendChild(xrem);
        current_repeat.appendChild(node);
    }

    function click_turn(){
        var base = '<select class="input_turn">' +
                      '<option value="90"> 90° </option>' +
                      '<option value="180"> 180° </option>' +
                      '<option value="270"> 270° </option>' +
                    '</select>';
        var code = get_code_element(TURN, TXT_AFTER_TURN, base);
        var node = document.createElement("div");
        node.className = "codel turn";
        node.innerHTML = code;
        var xrem = create_xrem();
        node.appendChild(xrem);
        current_repeat.appendChild(node);
    }

    function collect_user_code(e, code, level){
        var children = e.childNodes;
        var prefix = "#".repeat(level); //not needed, but more readable
        console.log("COLLECT", prefix);
        for(var i=0; i<children.length; i++){
            var child = children[i];
            if (child.innerHTML === undefined){
            //special treatment
            }
            else{
                console.log(child.innerHTML);
                if(child.className == "codel move"){
                    var el = child.getElementsByClassName('input_move')[0];
                    code.push(MOVE + el.value);
                    console.log("APPEND", prefix + MOVE + el.value);
                }
                else if(child.className == "codel turn"){
                    var el = child.getElementsByClassName('input_turn')[0];
                    code.push(TURN + el.value);
                    console.log("APPEND",prefix + TURN + el.value);
                }
                else if(child.className == "group_repeat"){
                    var el = child.getElementsByClassName('input_repeat')[0];
                    code.push(REPEAT + el.value);
                    console.log("APPEND", prefix + REPEAT + el.value);
                    var e = child.getElementsByClassName('input_repeat_lines')[0]
                    collect_user_code(e, code, level+1);
                    code.push(prefix+"#");
                }
            }
        }
    }

    function get_user_code(){
        var e = document.getElementById("code_pan");
        var code = [];
        collect_user_code(e, code, 0);
        return code;
    }

    function refresh_current_repeat(){
        var DEF_COLOR = "cyan";
        var candidates = document.getElementsByClassName("input_repeat_lines");
        var highest_level = 0;
        for(var i=0; i<candidates.length; i++){
            var e = candidates[i];
            e.style.backgroundColor = DEF_COLOR;
            if(e.matches(":hover")){
                if(e.level > highest_level){
                    current_repeat = e;
                    highest_level = e.level;
                }
            }
        }
        if(highest_level == 0)
            current_repeat = document.getElementById("code_pan");
        else
            current_repeat.style.backgroundColor = "red";
    }

    document.getElementById("move_button").innerHTML = MOVE + "...";
    document.getElementById("turn_button").innerHTML = TURN + "...";
    document.getElementById("repeat_button").innerHTML = REPEAT + "...";
    document.getElementById("run_button").innerHTML = RUN;
</script>

</body>

</html>

